{"version":3,"sources":["components/ImgCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["ImgCard","props","react_default","a","createElement","className","onClick","cardIncrement","id","alt","name","src","image","Wrapper","children","Styling","jumbo","background","color","textAlign","App","state","clicks","count","clickedCard","_this","setState","map","god","clicked","reset","shuffle","alert","godarray","shufflegods","_","_this2","this","components_Wrapper","style","components_ImgCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAeeA,MAZf,SAAiBC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAIL,EAAMM,cAAcN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWI,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,kBCD/CC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,2BCEnCC,EAAU,CACdC,MAAO,CACLC,WAAY,UACZC,MAAO,UACPC,UAAW,WAmFAC,6MA9EbC,MAAQ,CACNC,SACAC,MAAO,KAGThB,cAAgB,SAAAC,GAEd,IAAIgB,GAAc,EAClBC,EAAKC,SAAS,CACZH,MAAOE,EAAKJ,MAAME,MAAQ,IAE5BE,EAAKC,SAAS,CACZJ,OAAQG,EAAKJ,MAAMC,OAAOK,IAAI,SAAAC,GAO5B,OANIA,EAAIpB,KAAOA,KACO,IAAhBoB,EAAIC,UACNL,GAAc,GAEhBI,EAAIC,SAAU,GAETD,OAGS,IAAhBJ,GACFC,EAAKK,QAEPL,EAAKM,aAGPD,MAAQ,WACNE,MAAM,cAENP,EAAKC,SAAS,CACZJ,OAAQG,EAAKJ,MAAMC,OAAOK,IAAI,SAAAC,GAE5B,OADAA,EAAIC,SAAU,EACPD,IAETL,MAAO,OAIXQ,QAAU,WACR,IAAIE,EAAWR,EAAKJ,MAAMC,OACtBY,EAAcC,IAAEJ,QAAQE,GAC5BR,EAAKC,SAAS,CAAEJ,OAAQY,6EAGjB,IAAAE,EAAAC,KACP,OACInC,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BkC,MAAOxB,EAAQC,OACxDd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACXH,EAAAC,EAAAC,cAAA,4CAEFF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,oBAAYiC,KAAKhB,MAAME,MAAvB,kBAMPc,KAAKhB,MAAMC,OAAOK,IAAI,SAAAC,GAAG,OACxB1B,EAAAC,EAAAC,cAACoC,EAAD,CACEhC,GAAIoB,EAAIpB,GACRI,MAAOgB,EAAIhB,MACXL,cAAe6B,EAAK7B,0BAvEhBkC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf0da71b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ImgCard(props) {\r\n  return (\r\n    <div className=\"content\">\r\n    <div className=\"card\" onClick={()=>props.cardIncrement(props.id)}>\r\n      <div className=\"img-container\">\r\n        <img className=\"img-size\" alt={props.name} src={props.image} />\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImgCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from \"react\";\nimport clicks from \"./clicks.json\";\nimport ImgCard from \"./components/ImgCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport _ from \"lodash\";\n\nconst Styling = {\n  jumbo: {\n    background: \"#ff2400\",\n    color: \"#e2bf0b\",\n    textAlign: \"center\"\n  }\n};\n\nclass App extends Component {\n  state = {\n    clicks,\n    count: 0\n  };\n\n  cardIncrement = id => {\n    // We always use the setState method to update a component's state\n    let clickedCard = false;\n    this.setState({\n      count: this.state.count + 1\n    });\n    this.setState({\n      clicks: this.state.clicks.map(god => {\n        if (god.id === id) {\n          if (god.clicked === true) {\n            clickedCard = true;\n          }\n          god.clicked = true;\n        }\n        return god;\n      })\n    });\n    if (clickedCard === true) {\n      this.reset();\n    }\n    this.shuffle();\n  };\n\n  reset = () => {\n    alert(\"Try Again!\");\n\n    this.setState({\n      clicks: this.state.clicks.map(god => {\n        god.clicked = false;\n        return god;\n      }),\n      count: 0\n    });\n  };\n\n  shuffle = () => {\n    let godarray = this.state.clicks;\n    let shufflegods = _.shuffle(godarray);\n    this.setState({ clicks: shufflegods });\n  };\n\n  render() {\n    return (\n        <Wrapper>\n          <div className=\"App\">\n            <div className=\"jumbotron jumbotron-fluid\" style={Styling.jumbo}>\n              <div className=\"container\">\n                <h1 className=\"display-4\">\n                  <b>Clicky Game</b>\n                </h1>\n                <p className=\"lead\">\n                  <i>can you click each image once?</i>\n                </p>\n                <hr />\n                <p>\n                  <h2>Score: {this.state.count} out of 12</h2>\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {this.state.clicks.map(god => (\n            <ImgCard\n              id={god.id}\n              image={god.image}\n              cardIncrement={this.cardIncrement}\n            />\n          ))}\n        </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}